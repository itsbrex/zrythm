# SPDX-FileCopyrightText: Â© 2024-2025 Alexandros Theodotou <alex@zrythm.org>
# SPDX-License-Identifier: LicenseRef-ZrythmLicense

workflow:
  rules:
    # run merge request pipelines
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # do not run branch pipelines if corresponding merge requests exist...
    # (this avoids duplicate pipelines)
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # ...but otherwise run branch pipelines
    - if: $CI_COMMIT_BRANCH
    # run tag pipelines
    - if: $CI_COMMIT_TAG

variables:
  COMMON_CMAKE_OPTIONS: >-
    -DZRYTHM_STRICT=ON
    -DZRYTHM_TESTS=ON
    -DZRYTHM_BENCHMARKS=ON
    -DFETCHCONTENT_TRY_FIND_PACKAGE_MODE=NEVER
    -DCPM_DOWNLOAD_ALL=ON
    -DZRYTHM_WITH_BUNDLED_THIRD_PARTY_ATTRIBUTIONS=ON

stages:
  - setup
  - check
  - build # also test & package
  - deploy

.unix-activate-venv: &unix-activate-venv
  - source ./venv/bin/activate
  - export CPM_SOURCE_CACHE="${HOME}/.cache/CPM"

.windows-activate-venv: &windows-activate-venv
  - ./venv/Scripts/Activate.ps1

# .mac-enable-brew-env: &mac-enable-brew-env
  # - eval "$(/opt/homebrew/bin/brew shellenv)";

.windows-enable-vs-env: &windows-enable-vs-env
  - Import-Module "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
  - >-
    Enter-VsDevShell
    -VsInstallPath "C:\Program Files\Microsoft Visual Studio\2022\Community"
    -SkipAutomaticLocation
    -DevCmdArguments -arch=x64
  #- chcp 65001 # UTF-8

.gnu-linux-template:
  tags:
    - ubuntu20
  variables:
    BUILDDIR: "build_gnu_linux"
    QT_QPA_PLATFORM: "offscreen"
    INSTALLED_QT_PREFIX: "/opt/Qt-6.10.0/Release"
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - *unix-activate-venv

.sanitizer-template:
  extends: .gnu-linux-template
  tags:
    - archlinux
  stage: check
  needs: []
  variables:
    BUILDDIR: "build_sanitizer"
    SANITIZER_TYPE: "address"  # Default sanitizer
    RTSAN_OPTIONS: "suppressions=$CI_PROJECT_DIR/tools/rtsan_suppressions.supp"
  before_script:
    - *unix-activate-venv
  script:
    - >-
      cmake -B ${BUILDDIR}-${SANITIZER_TYPE} ${COMMON_CMAKE_OPTIONS}
      -G "Ninja"
      -DCMAKE_C_COMPILER=clang
      -DCMAKE_CXX_COMPILER=clang++
      -DCMAKE_PREFIX_PATH=${INSTALLED_QT_PREFIX}
      -DCMAKE_BUILD_TYPE=Debug
      -DZRYTHM_ENABLE_SANITIZER_${SANITIZER_TYPE}=ON
      -DZRYTHM_TESTS=ON
      -DZRYTHM_UNITY_BUILD=OFF
    - cmake --build ${BUILDDIR}-${SANITIZER_TYPE} --parallel
    - ctest --test-dir ${BUILDDIR}-${SANITIZER_TYPE} -V --output-on-failure

.mac-arm-template:
  tags:
    - mac-arm
  variables:
    BUILDDIR: "build_mac_arm"
  before_script:
    - *unix-activate-venv

.windows-template:
  tags:
    - windows11
  variables:
    BUILDDIR: "build_windows"
    INSTALLDIR: "install_windows"
    VSLANG: "1033"
    # use /MP1 to disable parallel builds if the compiler messages are hard to read
    CL: "/MP" # prepended to the cl command
    _CL_: "" # appended to the cl command
    _LINK_: ""
    CPM_SOURCE_CACHE: "C:/CPM-cache"
  before_script:
    - *windows-enable-vs-env
    - *windows-activate-venv

default:
  cache:
  # this number must be bumped every time these subprojects are updated
  - key: cache-31-$CI_RUNNER_DESCRIPTION
    paths:
      - venv
      - '${BUILDDIR}*/_deps/*-src'

# (see build-aux/Dockerfile for Qt build flags)
configure:gnu/linux:
  extends: .gnu-linux-template
  stage: setup
  before_script:
    - python3 -m venv venv
    - *unix-activate-venv
    # - python3 -m pip install -r requirements.txt
  script:
    - >-
      cmake -B ${BUILDDIR}-${BUILD_TYPE} ${COMMON_CMAKE_OPTIONS}
      -G "Ninja"
      -DCMAKE_C_COMPILER=gcc
      -DCMAKE_CXX_COMPILER=g++
      -DCMAKE_PREFIX_PATH=${INSTALLED_QT_PREFIX}
      -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
      -DZRYTHM_USER_MANUAL=OFF
      -DZRYTHM_WITH_LIBDW=OFF
      -DZRYTHM_UNITY_BUILD=ON
      $(if [ "${BUILD_TYPE}" = "Debug" ]; then echo "-DZRYTHM_COVERAGE=ON"; fi)
  parallel:
    matrix:
      - BUILD_TYPE: [Debug, Release]
  artifacts:
    paths:
      - ${BUILDDIR}-${BUILD_TYPE}
    exclude:
      - ${BUILDDIR}-${BUILD_TYPE}/**/.git/**/*
    expire_in: 1 day

configure-for-tools:gnu/linux:
  extends: .gnu-linux-template
  tags:
    - archlinux
  stage: setup
  before_script:
    - python3 -m venv venv
    - *unix-activate-venv
    - python3 -m pip install -r requirements.txt
  script:
    - >-
      cmake -B ${BUILDDIR} ${COMMON_CMAKE_OPTIONS}
      -G "Ninja"
      -DCMAKE_C_COMPILER=clang
      -DCMAKE_CXX_COMPILER=clang++
      -DCMAKE_PREFIX_PATH=${INSTALLED_QT_PREFIX}
      -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
      -DZRYTHM_USER_MANUAL=ON
      -DZRYTHM_STRICT_SPHINX_OPTS=ON
      -DZRYTHM_UNITY_BUILD=OFF
      -DCMAKE_LINKER_TYPE=MOLD
  artifacts:
    paths:
      - ${BUILDDIR}
    exclude:
      - ${BUILDDIR}/**/.git/**/*
    expire_in: 1 day

# Memo - Qt configured with (unity build fails):
# ../configure -skip qtgrpc -release -prefix /opt/Qt6.10.0-beta4-Release
# -pch -no-gtk -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre
# -qt-harfbuzz -opensource -confirm-license -skip qtdoc -skip qtwebengine
# -skip qtconnectivity -skip qtsensors -skip qtserialbus -skip qtserialport
# -skip qtlocation -skip qtpositioning -skip qtmqtt -skip qtremoteobjects
# -skip qtopcua -- -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"
configure:mac-arm:
  extends: .mac-arm-template
  stage: setup
  before_script:
    - python3 -m venv venv
    - *unix-activate-venv
    - python3 -m pip install -r requirements.txt
  script:
    - >-
      cmake -B ${BUILDDIR}-${BUILD_TYPE} ${COMMON_CMAKE_OPTIONS}
      -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
      -G "Xcode"
      "-DCMAKE_PREFIX_PATH=/opt/Qt-6.10.0/${BUILD_TYPE}"
      -DZRYTHM_UNITY_BUILD=ON
      -DAPPLE_APP_CODESIGN_IDENTITY="Developer ID Application: Alexandros Theodotou ($APPLE_NOTARIZATION_TEAM_ID)"
  parallel:
    matrix:
      - BUILD_TYPE: [Debug, Release]
  artifacts:
    paths:
      - ${BUILDDIR}-${BUILD_TYPE}
    exclude:
      - ${BUILDDIR}-${BUILD_TYPE}/**/.git/**/*
    expire_in: 1 day

# Memo - Qt configured with (-pch option caused failures in release build):
# configure.bat -skip qtgrpc -release -prefix 'C:\Qt\Qt-6.9.0-release'
# -unity-build -no-gtk -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre
# -qt-harfbuzz -opensource -confirm-license -skip qtdoc -skip qtwebengine
# -skip qtconnectivity -skip qtsensors -skip qtserialbus -skip qtserialport
# -skip qtlocation -skip qtpositioning -skip qtmqtt -skip qtremoteobjects
# -skip qtopcua -- -DCMAKE_OBJECT_PATH_MAX=1000
configure:windows:
  extends: .windows-template
  stage: setup
  before_script:
    - *windows-enable-vs-env
    - python -m venv venv
    - *windows-activate-venv
    - python -m pip install -r requirements.txt
  script:
    - >-
      cmake -B "${env:BUILDDIR}-${env:BUILD_TYPE}"
      -DZRYTHM_STRICT=ON
      -DZRYTHM_TESTS=ON
      -DZRYTHM_BENCHMARKS=ON
      -DFETCHCONTENT_TRY_FIND_PACKAGE_MODE=NEVER
      -DCPM_DOWNLOAD_ALL=ON
      -DZRYTHM_WITH_BUNDLED_THIRD_PARTY_ATTRIBUTIONS=ON
      "-DCMAKE_PREFIX_PATH=C:\Qt\Qt-6.10.0\${env:BUILD_TYPE}"
      -G "Visual Studio 17 2022"
      "-DCMAKE_BUILD_TYPE=${env:BUILD_TYPE}"
      "-DCMAKE_INSTALL_PREFIX=${PWD}\${env:INSTALLDIR}"
      -DZRYTHM_UNITY_BUILD=ON
  parallel:
    matrix:
      - BUILD_TYPE: [Debug, Release]
  artifacts:
    paths:
      - ${BUILDDIR}-${BUILD_TYPE}
    exclude:
      - ${BUILDDIR}-${BUILD_TYPE}/**/.git/**/*
    expire_in: 1 day

check:clazy:
  extends: .gnu-linux-template
  tags:
    - archlinux
  stage: check
  needs: []
  script:
    - export CLAZY_CHECKS="level0"
    - >-
      cmake -B build_clazy ${COMMON_CMAKE_OPTIONS}
      -G "Ninja"
      -DCMAKE_C_COMPILER=clang
      -DCMAKE_CXX_COMPILER=clazy
      -DCMAKE_PREFIX_PATH=${INSTALLED_QT_PREFIX}
      -DCMAKE_BUILD_TYPE=Debug
      -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON
      -DZRYTHM_UNITY_BUILD=OFF
    - cmake --build build_clazy --parallel || true # TODO

check:clang-format:
  extends: .gnu-linux-template
  tags:
    - archlinux
  stage: check
  needs: []
  script:
    - python3 scripts/run_clang_format.py --dry-run

check:reuse:
  extends: .gnu-linux-template
  stage: check
  needs: []
  script:
   - reuse lint

check:exif:
  extends: .gnu-linux-template
  tags:
    - archlinux
  stage: check
  needs: []
  script:
   - scripts/exif_check.sh

.unix_test_cmd: &unix_test_cmd
  - ctest --test-dir ${BUILDDIR}-${BUILD_TYPE} -V -D NightlyTest || (cat "${BUILDDIR}-${BUILD_TYPE}/Testing/Temporary/LastTest.log" && exit 1)
  - if [ "${BUILD_TYPE}" = "Debug" ]; then
      ctest --test-dir ${BUILDDIR}-${BUILD_TYPE} -D NightlyCoverage ;
    fi
  - ctest --test-dir ${BUILDDIR}-${BUILD_TYPE} -V -D NightlySubmit
  - if [ "${BUILD_TYPE}" = "Release" ]; then
      cmake --build ${BUILDDIR}-${BUILD_TYPE} --config ${BUILD_TYPE} --target run_all_benchmarks ;
    fi

check:clang-tidy:
  rules:
    - when: never # temporarily disable due to compilation issues
  extends: .gnu-linux-template
  tags:
    - archlinux
  stage: check
  needs:
    - job: configure-for-tools:gnu/linux
      artifacts: true
  script:
    - >-
      cmake -B ${BUILDDIR} ${COMMON_CMAKE_OPTIONS}
      -G "Ninja"
      -DCMAKE_C_COMPILER=clang
      -DCMAKE_CXX_COMPILER=clang++
      -DCMAKE_PREFIX_PATH=${INSTALLED_QT_PREFIX}
      -DCMAKE_BUILD_TYPE=Debug
      -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON
      -DZRYTHM_UNITY_BUILD=OFF
    - >-
      git diff -U0 HEAD^
      | python3 /usr/share/clang/clang-tidy-diff.py -p1
      -path ${BUILDDIR} -config-file .clang-tidy
      -use-color

check:sanitizer-undefined:
  extends: .sanitizer-template
  variables:
    SANITIZER_TYPE: "UNDEFINED_BEHAVIOR"

check:sanitizer-thread:
  extends: .sanitizer-template
  variables:
    SANITIZER_TYPE: "THREAD"

check:sanitizer-realtime:
  extends: .sanitizer-template
  variables:
    SANITIZER_TYPE: "REALTIME"

# AddressSanitizer/LeakSanitizer/MemorySanitizer are not needed since we are
# running valgrind anyway

build:gnu/linux:
  extends: .gnu-linux-template
  stage: build
  needs:
    - job: configure:gnu/linux
      artifacts: true
    - job: check:exif
    - job: check:reuse
    - job: check:clang-format
  timeout: 2h # a lot of tools are run here
  script:
    - cmake --build ${BUILDDIR}-${BUILD_TYPE} --config ${BUILD_TYPE} --parallel
    - *unix_test_cmd
    - >-
      ctest --test-dir ${BUILDDIR}-${BUILD_TYPE} -V
      --overwrite MemoryCheckCommandOptions="--undef-value-errors=no --exit-on-first-error=yes --error-exitcode=1"
      -T memcheck -E "appstream-util-validate-appdata"
      || (cat "${BUILDDIR}-${BUILD_TYPE}/Testing/Temporary/MemoryChecker.*.log" && exit 1)
    - cpack -G TXZ -C ${BUILD_TYPE} --config ${BUILDDIR}-${BUILD_TYPE}/CPackConfig.cmake --verbose -B package-${BUILD_TYPE}
  parallel:
    matrix:
      - BUILD_TYPE: [Debug, Release]
  artifacts:
    paths:
      - package-${BUILD_TYPE}/*.tar.xz*
    when: on_success
    expire_in: "1 day"

build:mac-arm:
  extends: .mac-arm-template
  stage: build
  needs:
    - job: configure:mac-arm
      artifacts: true
  script:
    # Limit parallel jobs because xcode clang forces a whole system restart when building debug builds
    - cmake --build ${BUILDDIR}-${BUILD_TYPE} --config ${BUILD_TYPE} --parallel 4
    - *unix_test_cmd
    - cpack -G "DragNDrop" -C ${BUILD_TYPE} --config ${BUILDDIR}-${BUILD_TYPE}/CPackConfig.cmake --verbose -B package-${BUILD_TYPE}
    - >-
      if [ "${BUILD_TYPE}" = "Release" ]; then
        scripts/mac_codesign_and_notarize_dmg.sh "package-${BUILD_TYPE}"/*.dmg "Developer ID Application: Alexandros Theodotou ($APPLE_NOTARIZATION_TEAM_ID)"
      else
        scripts/mac_codesign_dmg_for_debug.sh "package-${BUILD_TYPE}"/*.dmg "Developer ID Application: Alexandros Theodotou ($APPLE_NOTARIZATION_TEAM_ID)"
      fi
  parallel:
    matrix:
      - BUILD_TYPE: [Debug, Release]
  artifacts:
    paths:
      - package-${BUILD_TYPE}/*.dmg*
    when: on_success
    expire_in: "1 day"

build:windows:
  extends: .windows-template
  stage: build
  needs:
    - job: configure:windows
      artifacts: true
  script:
    - cmake --build "${env:BUILDDIR}-${env:BUILD_TYPE}" --config "${env:BUILD_TYPE}" --parallel -- /verbosity:minimal "/consoleLoggerParameters:NoSummary;ForceConsoleColor"
    - if (! $?) { exit 1 }  # Check if the previous command failed
    - ctest --test-dir "${env:BUILDDIR}-${env:BUILD_TYPE}" -C "${env:BUILD_TYPE}" -V -D NightlyTest -D NightlySubmit; if (-not $?) { Get-Content "${env:BUILDDIR}-${env:BUILD_TYPE}/Testing/Temporary/LastTest.log"; exit 1 }
    - if ("${env:BUILD_TYPE}" -eq "Release") { cmake --build "${BUILDDIR}-${BUILD_TYPE}" --config "${env:BUILD_TYPE}" --target run_all_benchmarks }
    - cpack -G INNOSETUP -C ${env:BUILD_TYPE} --config ${env:BUILDDIR}-${env:BUILD_TYPE}/CPackConfig.cmake --verbose -B package-${env:BUILD_TYPE}; if (-not $?) { Get-Content "package-${env:BUILD_TYPE}/_CPack_Packages/win64/INNOSETUP/ISCCOutput.log"; exit 1 }
  parallel:
    matrix:
      - BUILD_TYPE: [Debug, Release]
  artifacts:
    paths:
      - package-${BUILD_TYPE}/*.exe*
    when: on_success
    expire_in: "1 day"

update-manual:
  extends: .gnu-linux-template
  tags:
    - archlinux
  stage: deploy
  only:
    - master
    - tags
  needs:
    - job: build:gnu/linux
    - job: configure-for-tools:gnu/linux
      artifacts: true
  script:
    - cmake --build ${BUILDDIR} --target manual_bundle &> manual_bundle_results.txt || (cat manual_bundle_results.txt && exit 1)
    - rsync -av --no-group --omit-dir-times --exclude '*.zip' "${BUILDDIR}"/doc/user/_rendered/* $REMOTE_CI_USER@www.zrythm.org:$REMOTE_USER_MANUAL_UPLOAD_PATH
  before_script:
    - eval $(ssh-agent -s)
    #- ssh-add <(echo "$SSH_PRIVATE_KEY")
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - *unix-activate-venv

update-dev-docs:
  extends: .gnu-linux-template
  tags:
    - archlinux
  stage: deploy
  only:
    - master
    - tags
  needs:
    - job: build:gnu/linux
    - job: configure-for-tools:gnu/linux
      artifacts: true
  script:
    - cmake --build ${BUILDDIR} --target doxygen-docs &> gen_dev_docs_results.txt || (cat gen_dev_docs_results.txt && exit 1)
    - rsync -av --no-group --omit-dir-times "${BUILDDIR}"/doc/dev/html/* $REMOTE_CI_USER@www.zrythm.org:$REMOTE_DEV_DOCS_UPLOAD_PATH
  before_script:
    - eval $(ssh-agent -s)
    #- ssh-add <(echo "$SSH_PRIVATE_KEY")
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - *unix-activate-venv
